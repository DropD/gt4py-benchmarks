{
    "benchmarks.AdvectionDiffusionSuite.time_run": {
        "code": "class AdvectionDiffusionSuite:\n    def time_run(self, size, backend):\n        \"\"\"Run the benchmark simulation loop.\"\"\"\n        self.simulation.run()\n\n    def setup(self, size, backend):\n        \"\"\"Set up the simulation according to the given parameters.\"\"\"\n        self.simulation = None\n        if not has_cupy() and backend in [\"gtcuda\"]:\n            raise NotImplementedError()\n        self.simulation_spec = {\n            \"stencil\": None,\n            \"reference\": analytical.advection_diffusion,\n            \"tolerance\": 1.5e-2,\n            \"subclass\": AdvDiffSimulation,\n            \"domain\": analytical.AD_DOMAIN,\n            \"extra-args\": {\"coeff\": 0.05},\n            \"shape\": (size, size, 60),\n            \"max-time\": 0.1,\n            \"time-step\": 1e-3,\n        }\n        self.simulation = AdvDiffSimulation(self.simulation_spec, backend=backend)\n        self.simulation.run()",
        "min_run_count": 2,
        "name": "benchmarks.AdvectionDiffusionSuite.time_run",
        "number": 0,
        "param_names": [
            "size",
            "backend"
        ],
        "params": [
            [
                "8",
                "16",
                "32",
                "64"
            ],
            [
                "'gtx86'",
                "'gtmc'",
                "'gtcuda'",
                "'numpy'"
            ]
        ],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 600,
        "type": "time",
        "unit": "seconds",
        "version": "91b9a8927cc29f3df45e696781efd20d64721a67ede1b3ffab1eae60d65e71da",
        "warmup_time": -1
    },
    "version": 2
}